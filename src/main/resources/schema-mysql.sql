-- @formatter:off
-- ---------------------------------------------------------------------------------------
-- SSP TABLES --
DROP TABLE IF EXISTS SSP_MEMBER_GROUP_MAPPED;
CREATE TABLE SSP_MEMBER_GROUP_MAPPED (
    UID VARCHAR(200) NOT NULL COMMENT '회원 고유 ID',
    GROUP_ID VARCHAR(200) NOT NULL COMMENT '그룹 아이디',
    CONSTRAINT SSP_MEMBER_GROUP_MAPPED_PK PRIMARY KEY (UID, GROUP_ID)
) COMMENT = '회원-그룹 매핑';

DROP TABLE IF EXISTS SSP_GROUP_ROLE_MAPPED;
CREATE TABLE SSP_GROUP_ROLE_MAPPED (
    GROUP_ID VARCHAR(200) NOT NULL COMMENT '그룹 아이디',
    ROLE_ID VARCHAR(200) NOT NULL COMMENT '역할 아이디',
    CONSTRAINT SSP_GROUP_ROLE_MAPPED_PK PRIMARY KEY (GROUP_ID, ROLE_ID)
) COMMENT = '그룹-역할 매핑';

DROP TABLE IF EXISTS SSP_ROLE_API_MAPPED;
CREATE TABLE SSP_ROLE_API_MAPPED (
    ROLE_ID VARCHAR(200) NOT NULL COMMENT '역할 아이디',
    API_ID VARCHAR(200) NOT NULL COMMENT 'API 아이디',
    CONSTRAINT SSP_ROLE_API_MAPPED_PK PRIMARY KEY (ROLE_ID, API_ID)
) COMMENT = '역할-API 매핑';

DROP TABLE IF EXISTS SSP_API_INFO;
CREATE TABLE SSP_API_INFO (
    API_ID VARCHAR(200) NOT NULL COMMENT 'API 아이디',
    SERVICE_NAME VARCHAR(500) NOT NULL COMMENT '서비스 명',
    HOST VARCHAR(500) NOT NULL COMMENT '호스트(도메인)',
    API VARCHAR(1000) NOT NULL COMMENT 'API 경로',
    METHOD VARCHAR(20) NOT NULL COMMENT 'HTTP 메소드',
    API_DESC VARCHAR(500) COMMENT 'API 설명',
    IS_USE VARCHAR(1) DEFAULT 'Y' NOT NULL COMMENT '사용여부',
    CHECK_AUTH_TYPE VARCHAR(20) DEFAULT 'ALL' COMMENT '권한 검사 종류 (ALL, SKIP_API_AUTH, SKIP_ALL) ',
    CONSTRAINT SSP_API_INFO_PK PRIMARY KEY (API_ID)
) COMMENT = 'API 정보';

DROP TABLE IF EXISTS SSP_ROUTING_SERVICE_INFO;
CREATE TABLE SSP_ROUTING_SERVICE_INFO (
    SERVICE_NAME VARCHAR(500) NOT NULL COMMENT '서비스 명',
    HOST VARCHAR(500) NOT NULL COMMENT '호스트(도메인)',
    SERVICE_DESC VARCHAR(500) COMMENT '서비스 설명',
    CONSTRAINT SSP_ROUTING_SERVICE_INFO_PK PRIMARY KEY (SERVICE_NAME)
) COMMENT = '라우팅 서비스 정보';


DROP TABLE IF EXISTS SSP_IO_LOG;
CREATE TABLE SSP_IO_LOG (
    TOKEN VARCHAR(256) COMMENT '사용자 토큰',
    CHANNEL VARCHAR(200) COMMENT '사용자 채널',
    DIR VARCHAR(50) COMMENT 'INBOUNT/OUTBOUND - IN | OUT',
    SERVICE_UID VARCHAR(64) COMMENT '서비스 UUID',
    SERVICE_NAME VARCHAR(500) COMMENT '서비스 명',
    SERVICE_IP VARCHAR(200) COMMENT '서비스 IP',
    CLIENT_NAME VARCHAR(500) COMMENT 'CLIENT 명',
    CLIENT_IP VARCHAR(200) COMMENT 'CLIENT IP',
    UID VARCHAR(64) COMMENT 'REQUEST UUID',
    HOST VARCHAR(2000) COMMENT 'REQUEST HOST',
    API VARCHAR(2000) COMMENT 'REQUEST API',
    METHOD VARCHAR(20) COMMENT 'REQUEST METHOD',
    QUERY VARCHAR(2000) COMMENT 'REQUEST QUERY STRING',
    REQUEST_TIME DATETIME(6) COMMENT 'REQUEST TIME',
    REQUEST_BODY MEDIUMTEXT COMMENT 'REQUEST BODY',
    STATUS INT(3) COMMENT 'RESPONSE STATUS',
    RESPONSE_BODY MEDIUMTEXT COMMENT 'RESPONSE BODY',
    ELAPSED_TIME BIGINT COMMENT '실행시간'
) COMMENT = '서비스 I/O 로그';
CREATE INDEX SSP_IO_LOG_IX1 ON SSP_IO_LOG (TOKEN);
CREATE INDEX SSP_IO_LOG_IX2 ON SSP_IO_LOG (TOKEN, REQUEST_TIME DESC);


DROP TABLE IF EXISTS SSP_TOKEN_SEED_LOG;
CREATE TABLE SSP_TOKEN_SEED_LOG (
    PRIMARY_ID VARCHAR(500) NOT NULL COMMENT '사용자 UNIQUE KEY',
    SEED VARCHAR(64) NOT NULL COMMENT '토큰 생성에 사용 될 SEED',
    CHANNEL VARCHAR(200) NOT NULL COMMENT '토큰 생성 채널',
    CLIENT_IP VARCHAR(200) NOT NULL COMMENT '사용자 IP',
    TIMEOUT BIGINT COMMENT 'TIMEOUT(seconds)',
    EXPIRY_TIME BIGINT COMMENT 'TTL(UTC timestamp)',
    CHECKIN_TIME DATETIME(6) NOT NULL COMMENT 'SEED 생성/로그인 시간',
    CHECKOUT_TIME DATETIME(6) COMMENT 'SEED 폐기/로그아웃 시간',
    CHECKOUT_TYPE VARCHAR(200) COMMENT 'SEED 폐기 타입',
    CONSTRAINT SSP_TOKEN_SEED_LOG_PK PRIMARY KEY (PRIMARY_ID, SEED)
) COMMENT = 'SEED 생성 로그';
CREATE INDEX SSP_TOKEN_SEED_LOG_IX1 ON SSP_TOKEN_SEED_LOG (PRIMARY_ID, CHANNEL, CHECKOUT_TIME);
CREATE INDEX SSP_TOKEN_SEED_LOG_IX2 ON SSP_TOKEN_SEED_LOG (SEED);
CREATE INDEX SSP_TOKEN_SEED_LOG_IX3 ON SSP_TOKEN_SEED_LOG (SEED, CHECKOUT_TIME);


DROP TABLE IF EXISTS SSP_TOKEN_LOG;
CREATE TABLE SSP_TOKEN_LOG (
    SEED VARCHAR(64) NOT NULL COMMENT 'SEED',
    TOKEN VARCHAR(256) NOT NULL COMMENT '생성 토큰',
    TIMEOUT BIGINT COMMENT 'TIMEOUT(seconds)',
    EXPIRY_TIME BIGINT COMMENT 'TTL(UTC timestamp)',
    CLIENT_IP VARCHAR(200) NOT NULL COMMENT '사용자 IP',
    CREATION_TIME DATETIME(6) NOT NULL COMMENT '토큰 생성 시간',
    CONSTRAINT SSP_TOKEN_LOG_PK PRIMARY KEY (SEED, TOKEN)
) COMMENT = '토큰 생성 로그';


DROP TABLE IF EXISTS SSP_ERROR_CODE;
CREATE TABLE SSP_ERROR_CODE (
    ID VARCHAR(500) NOT NULL COMMENT '코드의 id',
    CODE VARCHAR(20) NOT NULL COMMENT 'error 코드',
    REASON VARCHAR(500) NOT NULL COMMENT 'error 메세지',
    STATUS INT COMMENT 'HttpStatus code',
    IS_USE VARCHAR(1) DEFAULT 'Y' COMMENT '사용여부',
    IS_TRACE VARCHAR(1) DEFAULT 'Y' COMMENT 'trace 사용여부',
    CONSTRAINT SSP_ERROR_CODE_PK PRIMARY KEY (ID)
) COMMENT = 'EXCEPTION 코드 정의';


DROP TABLE IF EXISTS SSP_REFRESH_TOKEN_LOG;
CREATE TABLE SSP_REFRESH_TOKEN_LOG (
    SEED VARCHAR(64) NOT NULL COMMENT 'SEED',
    REFRESH_TOKEN VARCHAR(256) NOT NULL COMMENT '리프레시 토큰',
    TIMEOUT BIGINT COMMENT 'TIMEOUT(seconds)',
    EXPIRY_TIME BIGINT COMMENT 'TTL(UTC timestamp)',
    CLIENT_IP VARCHAR(200) NOT NULL COMMENT '사용자 IP',
    CREATION_TIME DATETIME(6) NOT NULL COMMENT '토큰 생성 시간',
    CONSTRAINT SSP_REFRESH_TOKEN_LOG_PK PRIMARY KEY (SEED, REFRESH_TOKEN)
) COMMENT = '리프레시 토큰 생성 로그';

DROP TABLE IF EXISTS SSP_MEMBER_ALLOWED_IP_INFO;
CREATE TABLE SSP_MEMBER_ALLOWED_IP_INFO (
    PRIMARY_ID VARCHAR(200) NOT NULL COMMENT '사용자 UNIQUE KEY',
    ALLOWED_IP_RANGE_FROM VARCHAR(200) NOT NULL COMMENT '허용 IP 시작 범위',
    ALLOWED_IP_RANGE_TO VARCHAR(200) NOT NULL COMMENT '허용 IP 마지막 범위'
) COMMENT = '허용 IP 정보';

DROP TABLE IF EXISTS TODO;
CREATE TABLE TODO (
    ID VARCHAR(500) NOT NULL,
    MEMO VARCHAR(4000),
    DUE_DATE DATE,
    MODIFIED_DATETIME TIMESTAMP,
    PRIMARY KEY (ID)
);
